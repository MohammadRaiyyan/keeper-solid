/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PathlessLayoutRouteImport } from './routes/_pathlessLayout/route'
import { Route as AuthPathlessLayoutRouteImport } from './routes/_authPathlessLayout/route'
import { Route as IndexImport } from './routes/index'
import { Route as AuthPathlessLayoutRegisterImport } from './routes/_authPathlessLayout/register'
import { Route as AuthPathlessLayoutLoginImport } from './routes/_authPathlessLayout/login'
import { Route as PathlessLayoutTasksIndexImport } from './routes/_pathlessLayout/tasks/index'
import { Route as PathlessLayoutSettingsIndexImport } from './routes/_pathlessLayout/settings/index'
import { Route as PathlessLayoutProfileIndexImport } from './routes/_pathlessLayout/profile/index'
import { Route as PathlessLayoutHomeIndexImport } from './routes/_pathlessLayout/home/index'
import { Route as PathlessLayoutTasksTaskIdImport } from './routes/_pathlessLayout/tasks/$taskId'

// Create/Update Routes

const PathlessLayoutRouteRoute = PathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const AuthPathlessLayoutRouteRoute = AuthPathlessLayoutRouteImport.update({
  id: '/_authPathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthPathlessLayoutRegisterRoute = AuthPathlessLayoutRegisterImport.update(
  {
    id: '/register',
    path: '/register',
    getParentRoute: () => AuthPathlessLayoutRouteRoute,
  } as any,
)

const AuthPathlessLayoutLoginRoute = AuthPathlessLayoutLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthPathlessLayoutRouteRoute,
} as any)

const PathlessLayoutTasksIndexRoute = PathlessLayoutTasksIndexImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)

const PathlessLayoutSettingsIndexRoute =
  PathlessLayoutSettingsIndexImport.update({
    id: '/settings/',
    path: '/settings/',
    getParentRoute: () => PathlessLayoutRouteRoute,
  } as any)

const PathlessLayoutProfileIndexRoute = PathlessLayoutProfileIndexImport.update(
  {
    id: '/profile/',
    path: '/profile/',
    getParentRoute: () => PathlessLayoutRouteRoute,
  } as any,
)

const PathlessLayoutHomeIndexRoute = PathlessLayoutHomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)

const PathlessLayoutTasksTaskIdRoute = PathlessLayoutTasksTaskIdImport.update({
  id: '/tasks/$taskId',
  path: '/tasks/$taskId',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authPathlessLayout': {
      id: '/_authPathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthPathlessLayoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authPathlessLayout/login': {
      id: '/_authPathlessLayout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthPathlessLayoutLoginImport
      parentRoute: typeof AuthPathlessLayoutRouteImport
    }
    '/_authPathlessLayout/register': {
      id: '/_authPathlessLayout/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthPathlessLayoutRegisterImport
      parentRoute: typeof AuthPathlessLayoutRouteImport
    }
    '/_pathlessLayout/tasks/$taskId': {
      id: '/_pathlessLayout/tasks/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof PathlessLayoutTasksTaskIdImport
      parentRoute: typeof PathlessLayoutRouteImport
    }
    '/_pathlessLayout/home/': {
      id: '/_pathlessLayout/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof PathlessLayoutHomeIndexImport
      parentRoute: typeof PathlessLayoutRouteImport
    }
    '/_pathlessLayout/profile/': {
      id: '/_pathlessLayout/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof PathlessLayoutProfileIndexImport
      parentRoute: typeof PathlessLayoutRouteImport
    }
    '/_pathlessLayout/settings/': {
      id: '/_pathlessLayout/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof PathlessLayoutSettingsIndexImport
      parentRoute: typeof PathlessLayoutRouteImport
    }
    '/_pathlessLayout/tasks/': {
      id: '/_pathlessLayout/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof PathlessLayoutTasksIndexImport
      parentRoute: typeof PathlessLayoutRouteImport
    }
  }
}

// Create and export the route tree

interface AuthPathlessLayoutRouteRouteChildren {
  AuthPathlessLayoutLoginRoute: typeof AuthPathlessLayoutLoginRoute
  AuthPathlessLayoutRegisterRoute: typeof AuthPathlessLayoutRegisterRoute
}

const AuthPathlessLayoutRouteRouteChildren: AuthPathlessLayoutRouteRouteChildren =
  {
    AuthPathlessLayoutLoginRoute: AuthPathlessLayoutLoginRoute,
    AuthPathlessLayoutRegisterRoute: AuthPathlessLayoutRegisterRoute,
  }

const AuthPathlessLayoutRouteRouteWithChildren =
  AuthPathlessLayoutRouteRoute._addFileChildren(
    AuthPathlessLayoutRouteRouteChildren,
  )

interface PathlessLayoutRouteRouteChildren {
  PathlessLayoutTasksTaskIdRoute: typeof PathlessLayoutTasksTaskIdRoute
  PathlessLayoutHomeIndexRoute: typeof PathlessLayoutHomeIndexRoute
  PathlessLayoutProfileIndexRoute: typeof PathlessLayoutProfileIndexRoute
  PathlessLayoutSettingsIndexRoute: typeof PathlessLayoutSettingsIndexRoute
  PathlessLayoutTasksIndexRoute: typeof PathlessLayoutTasksIndexRoute
}

const PathlessLayoutRouteRouteChildren: PathlessLayoutRouteRouteChildren = {
  PathlessLayoutTasksTaskIdRoute: PathlessLayoutTasksTaskIdRoute,
  PathlessLayoutHomeIndexRoute: PathlessLayoutHomeIndexRoute,
  PathlessLayoutProfileIndexRoute: PathlessLayoutProfileIndexRoute,
  PathlessLayoutSettingsIndexRoute: PathlessLayoutSettingsIndexRoute,
  PathlessLayoutTasksIndexRoute: PathlessLayoutTasksIndexRoute,
}

const PathlessLayoutRouteRouteWithChildren =
  PathlessLayoutRouteRoute._addFileChildren(PathlessLayoutRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutRouteRouteWithChildren
  '/login': typeof AuthPathlessLayoutLoginRoute
  '/register': typeof AuthPathlessLayoutRegisterRoute
  '/tasks/$taskId': typeof PathlessLayoutTasksTaskIdRoute
  '/home': typeof PathlessLayoutHomeIndexRoute
  '/profile': typeof PathlessLayoutProfileIndexRoute
  '/settings': typeof PathlessLayoutSettingsIndexRoute
  '/tasks': typeof PathlessLayoutTasksIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutRouteRouteWithChildren
  '/login': typeof AuthPathlessLayoutLoginRoute
  '/register': typeof AuthPathlessLayoutRegisterRoute
  '/tasks/$taskId': typeof PathlessLayoutTasksTaskIdRoute
  '/home': typeof PathlessLayoutHomeIndexRoute
  '/profile': typeof PathlessLayoutProfileIndexRoute
  '/settings': typeof PathlessLayoutSettingsIndexRoute
  '/tasks': typeof PathlessLayoutTasksIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authPathlessLayout': typeof AuthPathlessLayoutRouteRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRouteRouteWithChildren
  '/_authPathlessLayout/login': typeof AuthPathlessLayoutLoginRoute
  '/_authPathlessLayout/register': typeof AuthPathlessLayoutRegisterRoute
  '/_pathlessLayout/tasks/$taskId': typeof PathlessLayoutTasksTaskIdRoute
  '/_pathlessLayout/home/': typeof PathlessLayoutHomeIndexRoute
  '/_pathlessLayout/profile/': typeof PathlessLayoutProfileIndexRoute
  '/_pathlessLayout/settings/': typeof PathlessLayoutSettingsIndexRoute
  '/_pathlessLayout/tasks/': typeof PathlessLayoutTasksIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/tasks/$taskId'
    | '/home'
    | '/profile'
    | '/settings'
    | '/tasks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/tasks/$taskId'
    | '/home'
    | '/profile'
    | '/settings'
    | '/tasks'
  id:
    | '__root__'
    | '/'
    | '/_authPathlessLayout'
    | '/_pathlessLayout'
    | '/_authPathlessLayout/login'
    | '/_authPathlessLayout/register'
    | '/_pathlessLayout/tasks/$taskId'
    | '/_pathlessLayout/home/'
    | '/_pathlessLayout/profile/'
    | '/_pathlessLayout/settings/'
    | '/_pathlessLayout/tasks/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthPathlessLayoutRouteRoute: typeof AuthPathlessLayoutRouteRouteWithChildren
  PathlessLayoutRouteRoute: typeof PathlessLayoutRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthPathlessLayoutRouteRoute: AuthPathlessLayoutRouteRouteWithChildren,
  PathlessLayoutRouteRoute: PathlessLayoutRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authPathlessLayout",
        "/_pathlessLayout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authPathlessLayout": {
      "filePath": "_authPathlessLayout/route.tsx",
      "children": [
        "/_authPathlessLayout/login",
        "/_authPathlessLayout/register"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout/route.tsx",
      "children": [
        "/_pathlessLayout/tasks/$taskId",
        "/_pathlessLayout/home/",
        "/_pathlessLayout/profile/",
        "/_pathlessLayout/settings/",
        "/_pathlessLayout/tasks/"
      ]
    },
    "/_authPathlessLayout/login": {
      "filePath": "_authPathlessLayout/login.tsx",
      "parent": "/_authPathlessLayout"
    },
    "/_authPathlessLayout/register": {
      "filePath": "_authPathlessLayout/register.tsx",
      "parent": "/_authPathlessLayout"
    },
    "/_pathlessLayout/tasks/$taskId": {
      "filePath": "_pathlessLayout/tasks/$taskId.tsx",
      "parent": "/_pathlessLayout"
    },
    "/_pathlessLayout/home/": {
      "filePath": "_pathlessLayout/home/index.tsx",
      "parent": "/_pathlessLayout"
    },
    "/_pathlessLayout/profile/": {
      "filePath": "_pathlessLayout/profile/index.tsx",
      "parent": "/_pathlessLayout"
    },
    "/_pathlessLayout/settings/": {
      "filePath": "_pathlessLayout/settings/index.tsx",
      "parent": "/_pathlessLayout"
    },
    "/_pathlessLayout/tasks/": {
      "filePath": "_pathlessLayout/tasks/index.tsx",
      "parent": "/_pathlessLayout"
    }
  }
}
ROUTE_MANIFEST_END */
